# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import agent_pb2 as agent__pb2
import genop_pb2 as genop__pb2
import image_pb2 as image__pb2
import profiling_pb2 as profiling__pb2
import resources_pb2 as resources__pb2
import session_pb2 as session__pb2
import tensorflow_pb2 as tensorflow__pb2
import torch_pb2 as torch__pb2


class VaccelAgentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateSession = channel.unary_unary(
                '/vaccel.VaccelAgent/CreateSession',
                request_serializer=session__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=session__pb2.CreateSessionResponse.FromString,
                )
        self.UpdateSession = channel.unary_unary(
                '/vaccel.VaccelAgent/UpdateSession',
                request_serializer=session__pb2.UpdateSessionRequest.SerializeToString,
                response_deserializer=agent__pb2.VaccelEmpty.FromString,
                )
        self.DestroySession = channel.unary_unary(
                '/vaccel.VaccelAgent/DestroySession',
                request_serializer=session__pb2.DestroySessionRequest.SerializeToString,
                response_deserializer=agent__pb2.VaccelEmpty.FromString,
                )
        self.CreateResource = channel.unary_unary(
                '/vaccel.VaccelAgent/CreateResource',
                request_serializer=resources__pb2.CreateResourceRequest.SerializeToString,
                response_deserializer=resources__pb2.CreateResourceResponse.FromString,
                )
        self.RegisterResource = channel.unary_unary(
                '/vaccel.VaccelAgent/RegisterResource',
                request_serializer=resources__pb2.RegisterResourceRequest.SerializeToString,
                response_deserializer=agent__pb2.VaccelEmpty.FromString,
                )
        self.UnregisterResource = channel.unary_unary(
                '/vaccel.VaccelAgent/UnregisterResource',
                request_serializer=resources__pb2.UnregisterResourceRequest.SerializeToString,
                response_deserializer=agent__pb2.VaccelEmpty.FromString,
                )
        self.DestroyResource = channel.unary_unary(
                '/vaccel.VaccelAgent/DestroyResource',
                request_serializer=resources__pb2.DestroyResourceRequest.SerializeToString,
                response_deserializer=agent__pb2.VaccelEmpty.FromString,
                )
        self.ImageClassification = channel.unary_unary(
                '/vaccel.VaccelAgent/ImageClassification',
                request_serializer=image__pb2.ImageClassificationRequest.SerializeToString,
                response_deserializer=image__pb2.ImageClassificationResponse.FromString,
                )
        self.ImageDetect = channel.unary_unary(
                '/vaccel.VaccelAgent/ImageDetect',
                request_serializer=image__pb2.ImageDetectRequest.SerializeToString,
                response_deserializer=image__pb2.ImageDetectResponse.FromString,
                )
        self.ImageSegment = channel.unary_unary(
                '/vaccel.VaccelAgent/ImageSegment',
                request_serializer=image__pb2.ImageSegmentRequest.SerializeToString,
                response_deserializer=image__pb2.ImageSegmentResponse.FromString,
                )
        self.ImagePose = channel.unary_unary(
                '/vaccel.VaccelAgent/ImagePose',
                request_serializer=image__pb2.ImagePoseRequest.SerializeToString,
                response_deserializer=image__pb2.ImagePoseRequest.FromString,
                )
        self.ImageDepth = channel.unary_unary(
                '/vaccel.VaccelAgent/ImageDepth',
                request_serializer=image__pb2.ImageDepthRequest.SerializeToString,
                response_deserializer=image__pb2.ImageDepthRequest.FromString,
                )
        self.TensorflowModelLoad = channel.unary_unary(
                '/vaccel.VaccelAgent/TensorflowModelLoad',
                request_serializer=tensorflow__pb2.TensorflowModelLoadRequest.SerializeToString,
                response_deserializer=tensorflow__pb2.TensorflowModelLoadResponse.FromString,
                )
        self.TensorflowModelUnload = channel.unary_unary(
                '/vaccel.VaccelAgent/TensorflowModelUnload',
                request_serializer=tensorflow__pb2.TensorflowModelUnloadRequest.SerializeToString,
                response_deserializer=tensorflow__pb2.TensorflowModelUnloadResponse.FromString,
                )
        self.TensorflowModelRun = channel.unary_unary(
                '/vaccel.VaccelAgent/TensorflowModelRun',
                request_serializer=tensorflow__pb2.TensorflowModelRunRequest.SerializeToString,
                response_deserializer=tensorflow__pb2.TensorflowModelRunResponse.FromString,
                )
        self.TorchJitloadForward = channel.unary_unary(
                '/vaccel.VaccelAgent/TorchJitloadForward',
                request_serializer=torch__pb2.TorchJitloadForwardRequest.SerializeToString,
                response_deserializer=torch__pb2.TorchJitloadForwardResponse.FromString,
                )
        self.Genop = channel.unary_unary(
                '/vaccel.VaccelAgent/Genop',
                request_serializer=genop__pb2.GenopRequest.SerializeToString,
                response_deserializer=genop__pb2.GenopResponse.FromString,
                )
        self.GetTimers = channel.unary_unary(
                '/vaccel.VaccelAgent/GetTimers',
                request_serializer=profiling__pb2.ProfilingRequest.SerializeToString,
                response_deserializer=profiling__pb2.ProfilingResponse.FromString,
                )


class VaccelAgentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateSession(self, request, context):
        """Session handling
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroySession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateResource(self, request, context):
        """vAccelRT resource handling
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DestroyResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageClassification(self, request, context):
        """Image Classification API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageDetect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageSegment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImagePose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageDepth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TensorflowModelLoad(self, request, context):
        """TensorFlow inference API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TensorflowModelUnload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TensorflowModelRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TorchJitloadForward(self, request, context):
        """PyTorch inference API
        rpc TorchModelLoad(TorchModelLoadRequest) returns (TorchModelLoadResponse);
        rpc TorchModelUnload(TorchModelUnloadRequest) returns (TorchModelUnloadResponse);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Genop(self, request, context):
        """Generic Operation API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimers(self, request, context):
        """Profiling Operation API
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VaccelAgentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=session__pb2.CreateSessionRequest.FromString,
                    response_serializer=session__pb2.CreateSessionResponse.SerializeToString,
            ),
            'UpdateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSession,
                    request_deserializer=session__pb2.UpdateSessionRequest.FromString,
                    response_serializer=agent__pb2.VaccelEmpty.SerializeToString,
            ),
            'DestroySession': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroySession,
                    request_deserializer=session__pb2.DestroySessionRequest.FromString,
                    response_serializer=agent__pb2.VaccelEmpty.SerializeToString,
            ),
            'CreateResource': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateResource,
                    request_deserializer=resources__pb2.CreateResourceRequest.FromString,
                    response_serializer=resources__pb2.CreateResourceResponse.SerializeToString,
            ),
            'RegisterResource': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterResource,
                    request_deserializer=resources__pb2.RegisterResourceRequest.FromString,
                    response_serializer=agent__pb2.VaccelEmpty.SerializeToString,
            ),
            'UnregisterResource': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterResource,
                    request_deserializer=resources__pb2.UnregisterResourceRequest.FromString,
                    response_serializer=agent__pb2.VaccelEmpty.SerializeToString,
            ),
            'DestroyResource': grpc.unary_unary_rpc_method_handler(
                    servicer.DestroyResource,
                    request_deserializer=resources__pb2.DestroyResourceRequest.FromString,
                    response_serializer=agent__pb2.VaccelEmpty.SerializeToString,
            ),
            'ImageClassification': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageClassification,
                    request_deserializer=image__pb2.ImageClassificationRequest.FromString,
                    response_serializer=image__pb2.ImageClassificationResponse.SerializeToString,
            ),
            'ImageDetect': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageDetect,
                    request_deserializer=image__pb2.ImageDetectRequest.FromString,
                    response_serializer=image__pb2.ImageDetectResponse.SerializeToString,
            ),
            'ImageSegment': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageSegment,
                    request_deserializer=image__pb2.ImageSegmentRequest.FromString,
                    response_serializer=image__pb2.ImageSegmentResponse.SerializeToString,
            ),
            'ImagePose': grpc.unary_unary_rpc_method_handler(
                    servicer.ImagePose,
                    request_deserializer=image__pb2.ImagePoseRequest.FromString,
                    response_serializer=image__pb2.ImagePoseRequest.SerializeToString,
            ),
            'ImageDepth': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageDepth,
                    request_deserializer=image__pb2.ImageDepthRequest.FromString,
                    response_serializer=image__pb2.ImageDepthRequest.SerializeToString,
            ),
            'TensorflowModelLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.TensorflowModelLoad,
                    request_deserializer=tensorflow__pb2.TensorflowModelLoadRequest.FromString,
                    response_serializer=tensorflow__pb2.TensorflowModelLoadResponse.SerializeToString,
            ),
            'TensorflowModelUnload': grpc.unary_unary_rpc_method_handler(
                    servicer.TensorflowModelUnload,
                    request_deserializer=tensorflow__pb2.TensorflowModelUnloadRequest.FromString,
                    response_serializer=tensorflow__pb2.TensorflowModelUnloadResponse.SerializeToString,
            ),
            'TensorflowModelRun': grpc.unary_unary_rpc_method_handler(
                    servicer.TensorflowModelRun,
                    request_deserializer=tensorflow__pb2.TensorflowModelRunRequest.FromString,
                    response_serializer=tensorflow__pb2.TensorflowModelRunResponse.SerializeToString,
            ),
            'TorchJitloadForward': grpc.unary_unary_rpc_method_handler(
                    servicer.TorchJitloadForward,
                    request_deserializer=torch__pb2.TorchJitloadForwardRequest.FromString,
                    response_serializer=torch__pb2.TorchJitloadForwardResponse.SerializeToString,
            ),
            'Genop': grpc.unary_unary_rpc_method_handler(
                    servicer.Genop,
                    request_deserializer=genop__pb2.GenopRequest.FromString,
                    response_serializer=genop__pb2.GenopResponse.SerializeToString,
            ),
            'GetTimers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTimers,
                    request_deserializer=profiling__pb2.ProfilingRequest.FromString,
                    response_serializer=profiling__pb2.ProfilingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vaccel.VaccelAgent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VaccelAgent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/CreateSession',
            session__pb2.CreateSessionRequest.SerializeToString,
            session__pb2.CreateSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/UpdateSession',
            session__pb2.UpdateSessionRequest.SerializeToString,
            agent__pb2.VaccelEmpty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DestroySession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/DestroySession',
            session__pb2.DestroySessionRequest.SerializeToString,
            agent__pb2.VaccelEmpty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/CreateResource',
            resources__pb2.CreateResourceRequest.SerializeToString,
            resources__pb2.CreateResourceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/RegisterResource',
            resources__pb2.RegisterResourceRequest.SerializeToString,
            agent__pb2.VaccelEmpty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnregisterResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/UnregisterResource',
            resources__pb2.UnregisterResourceRequest.SerializeToString,
            agent__pb2.VaccelEmpty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DestroyResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/DestroyResource',
            resources__pb2.DestroyResourceRequest.SerializeToString,
            agent__pb2.VaccelEmpty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageClassification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/ImageClassification',
            image__pb2.ImageClassificationRequest.SerializeToString,
            image__pb2.ImageClassificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageDetect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/ImageDetect',
            image__pb2.ImageDetectRequest.SerializeToString,
            image__pb2.ImageDetectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageSegment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/ImageSegment',
            image__pb2.ImageSegmentRequest.SerializeToString,
            image__pb2.ImageSegmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImagePose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/ImagePose',
            image__pb2.ImagePoseRequest.SerializeToString,
            image__pb2.ImagePoseRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageDepth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/ImageDepth',
            image__pb2.ImageDepthRequest.SerializeToString,
            image__pb2.ImageDepthRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TensorflowModelLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/TensorflowModelLoad',
            tensorflow__pb2.TensorflowModelLoadRequest.SerializeToString,
            tensorflow__pb2.TensorflowModelLoadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TensorflowModelUnload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/TensorflowModelUnload',
            tensorflow__pb2.TensorflowModelUnloadRequest.SerializeToString,
            tensorflow__pb2.TensorflowModelUnloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TensorflowModelRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/TensorflowModelRun',
            tensorflow__pb2.TensorflowModelRunRequest.SerializeToString,
            tensorflow__pb2.TensorflowModelRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TorchJitloadForward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/TorchJitloadForward',
            torch__pb2.TorchJitloadForwardRequest.SerializeToString,
            torch__pb2.TorchJitloadForwardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Genop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/Genop',
            genop__pb2.GenopRequest.SerializeToString,
            genop__pb2.GenopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTimers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vaccel.VaccelAgent/GetTimers',
            profiling__pb2.ProfilingRequest.SerializeToString,
            profiling__pb2.ProfilingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
